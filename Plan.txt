Bottle.py: The bottle class. Has an array that holds tags, plus an int for quantity and an array that holds reviews, plus an index.

Rack.py: Stores a bunch of bottles in an array. 
  * The rack should get written to a file. At the start of each operation, read the rack from 
    the db. At the end of each operation, write it back. This will get me into trouble
    at some point (since it is a lot of unnecessary disk i/o) but once I have something that
    works I can work on optimizing it later.
  * I should be able to search through the rack for bottles that match some subset of tags 
    and get an array of matching bottles.
  * I should have some interface for selecting particular bottles and performing operations
    on them: changing quantity, drinking, etc.


Interaction:

$ wine add [tag list]
  ## This adds a bottle of the description given. If that bottle is already in the rack,
  ## it selects the bottle and displays it. If multiple bottles fit the tags, it displays
  ## all the bottles it fits and lets me choose one.

$ wine list [tag]
  ## This should return a list of all the bottles with the tag or tag combination given.
  ## From this list, I should be able to select and display a bottle.
  ## '$ wine list' with no tags should list everything that is in the rack.

$ wine drink [tag list]
  ## select a bottle, or display a list and let me select. Prompt me for thoughts on the 
  ## bottle, decrement the stock by 1, and write it to the db.

$ wine delete [tag list]
  ## select or list. Delete selection from the rack, write the rack to db.

$ wine edit [tag list]
  ## select or list. Let me add or remove stock, edit price.

*** The API here is super super out of date, should sit down and update this before starting
*** my next refactor

Bottle api:
Rack api:

Open tasks:
  
  * redocument the api so that it's accurate.
  * implement some functionality to make it clear what bottle of wine I'm looking
    at or editing, QOL stuff.

  * Add the ability to tag wines as "saving for a special occasion" or "open whenever".
    calling '$ wine next' will return a random bottle from the "open whenever" list.
    You could also say '$wine next pinot noir' or 'wine next white' and it returns 
    a bottle from the relevant list. This also means that I'll have to implement
    the 'red' or 'white' tag, which i want to try and do mostly automatically by detecting
    grapes in the wine.

  * I want to be able to upload pictures of the wines and associate them with the bottles.
    This is probably a 2.0 feature that will require architecting it in a different way,
    but figure out how to do it.

  * Add the ability to '$ list historical' which prints every wine, then change list and select
    to only show wines in stock by default


long term refactoring:

	* implement a way to look at multiple bottles at once

	* implement a backup for the wine database so that if i accidentally nuke it while testing a refactor I'm not hosed

	* holy shit figure out git and version control because goddamn

	* consider how to implement multiple racks

	* The sort functionality stuff in Rack.searchRack is kind of a hot mess; it works but it's very messy.
	  would probably be worth cleaning that up at some point.

	* Figure out some sort of configuration solution so that I can have stuff like wine db path in a config file and reference that instead of hardcoding it in the file.
	
	* Set up some sort of engine to identify tags as vineyards or grapes or whatever so that the name can be set in a specific order

  * Right now, Bottle subclasses Dict and Rack subclasses list. This works, but isn't
    especially great. I should a) stop subclassing and just implement the magic methods I need
    and b) figure out how to serialize after I stop subclassing.
